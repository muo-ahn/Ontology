"""Shared pydantic models for the vLM → Neo4j → LLM evaluation pipeline."""

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, ConfigDict, model_validator


class FindingModel(BaseModel):
    """Structured representation of a vision finding."""

    id: str
    type: str
    location: Optional[str] = None
    size_cm: Optional[float] = Field(default=None, description="Approximate size in centimetres")
    conf: Optional[float] = Field(default=None, description="Model confidence between 0 and 1")


class ImageModel(BaseModel):
    """Metadata for an image node in the knowledge graph."""

    model_config = ConfigDict(populate_by_name=True)

    image_id: str
    path: str
    modality: Optional[str] = None

    @model_validator(mode="before")
    @classmethod
    def _promote_legacy_id(cls, data: Any) -> Any:
        if isinstance(data, dict) and "image_id" not in data and data.get("id"):
            data = dict(data)
            data["image_id"] = data["id"]
        return data


class ReportModel(BaseModel):
    """Summary text generated by a model about the image."""

    id: str
    text: str
    model: str
    conf: float
    ts: datetime


class KGUpsertRequest(BaseModel):
    """Payload used to upsert a Case → Image → Findings → Report bundle."""

    case_id: str
    image: ImageModel
    report: ReportModel
    findings: list[FindingModel] = Field(default_factory=list)


class DummyEvaluation(BaseModel):
    """Summary payload for dummy ontology evaluation."""

    image_id: str
    similar_seed_images: List[Dict[str, Any]] = Field(default_factory=list)
    edges_created: int = 0
    ctx_paths_len: int = 0
    agreement_score: float = 0.0
    confidence: str = "low"
    context_paths: List[Dict[str, Any]] = Field(default_factory=list)
    consensus: Dict[str, Any] = Field(default_factory=dict)


class AnalyzeResp(BaseModel):
    """HTTP response envelope for the /pipeline/analyze endpoint."""

    ok: bool
    case_id: Optional[str] = None
    image_id: Optional[str] = None
    graph_context: Dict[str, Any] = Field(default_factory=dict)
    results: Dict[str, Any] = Field(default_factory=dict)
    timings: Dict[str, int] = Field(default_factory=dict)
    errors: List[Dict[str, str]] = Field(default_factory=list)
    debug: Dict[str, Any] = Field(default_factory=dict)
    evaluation: Optional[DummyEvaluation] = None
